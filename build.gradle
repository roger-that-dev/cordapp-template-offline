buildscript {
    ext.corda_release_version = '0.12.1'
    ext.corda_gradle_plugins_version = '0.12.3'
    ext.kotlin_version = '1.1.2'

    repositories {
        flatDir {
            dirs 'lib/dependencies'
        }
    }

    dependencies {
        classpath "com.typesafe:config:1.3.1"
        classpath "net.corda:cordform-common:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "org.apache.commons:commons-lang:2.6"
        classpath "org.bouncycastle:bcprov-jdk15on:1.56"
        classpath "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-compiler-runner:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin-api:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.cordformation'

repositories {
    flatDir { dirs 'lib/dependencies' }
}

sourceSets {
    main {
        resources {
            srcDir "config/dev"
        }
    }
    test {
        resources {
            srcDir "config/test"
        }
    }
}

dependencies {
    compile fileTree(dir: 'lib/dependencies' , include: '*.jar')
    compile "org.jetbrains.kotlin:kotlin-gradle-plugin-api:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['build']) {
    directory "./build/nodes"
    networkMap "CN=Controller,O=R3,OU=corda,L=London,C=UK"
    node {
        name "CN=Controller,O=R3,OU=corda,L=London,C=UK"
        advertisedServices = ["corda.notary.validating"]
        p2pPort 10002
        rpcPort 10003
        cordapps = []
    }
    node {
        name "CN=NodeA,O=NodeA,L=London,C=UK"
        advertisedServices = []
        p2pPort 10005
        rpcPort 10006
        webPort 10007
        cordapps = []
        rpcUsers = [[user: "user1", "password": "test", "permissions": []]]
    }
    node {
        name "CN=NodeB,O=NodeB,L=New York,C=US"
        advertisedServices = []
        p2pPort 10008
        rpcPort 10009
        webPort 10010
        cordapps = []
        rpcUsers = [[user: "user1", "password": "test", "permissions": []]]
    }
    node {
        name "CN=NodeC,O=NodeC,L=Paris,C=FR"
        advertisedServices = []
        p2pPort 10011
        rpcPort 10012
        webPort 10013
        cordapps = []
        rpcUsers = [[user: "user1", "password": "test", "permissions": []]]
    }
}

idea {
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

task runTemplateClientRPC(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.template.client.TemplateClientRPCKt'
    args 'localhost:10006'
}
